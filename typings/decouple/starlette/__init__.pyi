"""
This type stub file was generated by pyright.
"""

import typing
import python_multipart as multipart
from dataclasses import dataclass, field
from enum import Enum
from tempfile import SpooledTemporaryFile
from urllib.parse import unquote_plus
from starlette.datastructures import FormData, Headers, UploadFile
from python_multipart.multipart import MultipartCallbacks, QuerystringCallbacks, parse_options_header

if typing.TYPE_CHECKING:
    ...
else:
    ...
class FormMessage(Enum):
    FIELD_START = ...
    FIELD_NAME = ...
    FIELD_DATA = ...
    FIELD_END = ...
    END = ...


@dataclass
class MultipartPart:
    content_disposition: bytes | None = ...
    field_name: str = ...
    data: bytearray = ...
    file: UploadFile | None = ...
    item_headers: list[tuple[bytes, bytes]] = ...


class MultiPartException(Exception):
    def __init__(self, message: str) -> None:
        ...
    


class FormParser:
    def __init__(self, headers: Headers, stream: typing.AsyncGenerator[bytes, None]) -> None:
        ...
    
    def on_field_start(self) -> None:
        ...
    
    def on_field_name(self, data: bytes, start: int, end: int) -> None:
        ...
    
    def on_field_data(self, data: bytes, start: int, end: int) -> None:
        ...
    
    def on_field_end(self) -> None:
        ...
    
    def on_end(self) -> None:
        ...
    
    async def parse(self) -> FormData:
        ...
    


class MultiPartParser:
    spool_max_size = ...
    max_part_size = ...
    def __init__(self, headers: Headers, stream: typing.AsyncGenerator[bytes, None], *, max_files: int | float = ..., max_fields: int | float = ..., max_part_size: int = ...) -> None:
        ...
    
    def on_part_begin(self) -> None:
        ...
    
    def on_part_data(self, data: bytes, start: int, end: int) -> None:
        ...
    
    def on_part_end(self) -> None:
        ...
    
    def on_header_field(self, data: bytes, start: int, end: int) -> None:
        ...
    
    def on_header_value(self, data: bytes, start: int, end: int) -> None:
        ...
    
    def on_header_end(self) -> None:
        ...
    
    def on_headers_finished(self) -> None:
        ...
    
    def on_end(self) -> None:
        ...
    
    async def parse(self) -> FormData:
        ...
    


